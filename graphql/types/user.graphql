type User {
    id: ID!
    first_name: String!
    middle_name: String
    last_name: String!
    email: String!
    prizebonds: [UserPrizeBond!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateUserInput {
    first_name: String!
    middle_name: String
    last_name: String!
    email: String!
}

# Queries
extend type Query @middleware(checks: ["auth:api"]) {
    "Get single filtered user"
    user(id: ID! @eq): User @find
    "Get list of all users with additinal filters"
    users: [User!]! @paginate(defaultCount: 10, , maxCount:100)
    me : User
}

# Mutations
extend type Mutation @middleware(checks: ["auth:api"]) {
    createUser(input: CreateUserInput! @spread): User @create
    updateUser(
        id: ID @rules(apply: ["required"])
        first_name: String
        middle_name: String
        last_name: String
        email: String @rules(apply: ["email"])
    ): User @update(model: "App\\Models\\User")
    deleteUser(id: ID! @rules(apply: ["required"])): User @delete(model: "App\\Models\\User")
}
